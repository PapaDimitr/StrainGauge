
Strain Gauge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003bf0  08003bf0  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003bf0  08003bf0  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00004bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003bf8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005024  2**0
                  CONTENTS
 10 .bss          000000e0  20000024  20000024  00005024  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  00005024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009336  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bfb  00000000  00000000  0000e38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  0000ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000622  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a5bb  00000000  00000000  00010de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4c2  00000000  00000000  0002b39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c936  00000000  00000000  0003585f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d2195  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002088  00000000  00000000  000d21d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000d4260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ba8 	.word	0x08003ba8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08003ba8 	.word	0x08003ba8

080001c8 <sendMessage>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int sendMessage(float data){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t payload[4] = {0};  // Prepare 8-byte buffer (in case you expand later)
 80001d2:	2300      	movs	r3, #0
 80001d4:	613b      	str	r3, [r7, #16]
  union {
    float f;
    uint8_t bytes[4];
  } converter;

  converter.f = data;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	60fb      	str	r3, [r7, #12]

  // Copy bytes to CAN payload
  for (int i = 0; i < 4; i++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
 80001de:	e00d      	b.n	80001fc <sendMessage+0x34>
    payload[i] = converter.bytes[i];
 80001e0:	f107 020c 	add.w	r2, r7, #12
 80001e4:	697b      	ldr	r3, [r7, #20]
 80001e6:	4413      	add	r3, r2
 80001e8:	7819      	ldrb	r1, [r3, #0]
 80001ea:	f107 0210 	add.w	r2, r7, #16
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	4413      	add	r3, r2
 80001f2:	460a      	mov	r2, r1
 80001f4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++) {
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	3301      	adds	r3, #1
 80001fa:	617b      	str	r3, [r7, #20]
 80001fc:	697b      	ldr	r3, [r7, #20]
 80001fe:	2b03      	cmp	r3, #3
 8000200:	ddee      	ble.n	80001e0 <sendMessage+0x18>
  }

  uint32_t txMailbox;

  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, payload, &txMailbox) != HAL_OK){
 8000202:	f107 0308 	add.w	r3, r7, #8
 8000206:	f107 0210 	add.w	r2, r7, #16
 800020a:	4908      	ldr	r1, [pc, #32]	@ (800022c <sendMessage+0x64>)
 800020c:	4808      	ldr	r0, [pc, #32]	@ (8000230 <sendMessage+0x68>)
 800020e:	f001 fc8e 	bl	8001b2e <HAL_CAN_AddTxMessage>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d004      	beq.n	8000222 <sendMessage+0x5a>
    Error_Handler();
 8000218:	f000 f9e8 	bl	80005ec <Error_Handler>
    return CAN_MESSAGE_FAIL;
 800021c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000220:	e000      	b.n	8000224 <sendMessage+0x5c>
  }

  return CAN_MESSAGE_SENT;
 8000222:	2300      	movs	r3, #0
}
 8000224:	4618      	mov	r0, r3
 8000226:	3718      	adds	r7, #24
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000000 	.word	0x20000000
 8000230:	200000d4 	.word	0x200000d4

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fb23 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f86f 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f987 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000246:	f000 f967 	bl	8000518 <MX_DMA_Init>
  MX_ADC1_Init();
 800024a:	f000 f8c1 	bl	80003d0 <MX_ADC1_Init>
  MX_CAN_Init();
 800024e:	f000 f92f 	bl	80004b0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8000252:	482c      	ldr	r0, [pc, #176]	@ (8000304 <main+0xd0>)
 8000254:	f001 fc27 	bl	8001aa6 <HAL_CAN_Start>

  //Initialize the ADC
  HAL_ADC_Init(&hadc1);
 8000258:	482b      	ldr	r0, [pc, #172]	@ (8000308 <main+0xd4>)
 800025a:	f000 fb97 	bl	800098c <HAL_ADC_Init>
  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 800025e:	2100      	movs	r1, #0
 8000260:	4829      	ldr	r0, [pc, #164]	@ (8000308 <main+0xd4>)
 8000262:	f000 fdff 	bl	8000e64 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,&adc_dma_buffer,1);
 8000266:	2201      	movs	r2, #1
 8000268:	4928      	ldr	r1, [pc, #160]	@ (800030c <main+0xd8>)
 800026a:	4827      	ldr	r0, [pc, #156]	@ (8000308 <main+0xd4>)
 800026c:	f000 fd20 	bl	8000cb0 <HAL_ADC_Start_DMA>

  HAL_GPIO_TogglePin(GPIOF,GPIO_PIN_2);
 8000270:	2104      	movs	r1, #4
 8000272:	4827      	ldr	r0, [pc, #156]	@ (8000310 <main+0xdc>)
 8000274:	f002 f95e 	bl	8002534 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 1;
 8000278:	2301      	movs	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
  float median_strain = 0;
 800027c:	f04f 0300 	mov.w	r3, #0
 8000280:	60bb      	str	r3, [r7, #8]

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
    if(i == 10)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b0a      	cmp	r3, #10
 8000286:	d110      	bne.n	80002aa <main+0x76>
    {
      i = 1;
 8000288:	2301      	movs	r3, #1
 800028a:	60fb      	str	r3, [r7, #12]
      median_strain /= 10;
 800028c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000290:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000298:	edc7 7a02 	vstr	s15, [r7, #8]
      sendMessage(median_strain);
 800029c:	ed97 0a02 	vldr	s0, [r7, #8]
 80002a0:	f7ff ff92 	bl	80001c8 <sendMessage>
      median_strain = 0;
 80002a4:	f04f 0300 	mov.w	r3, #0
 80002a8:	60bb      	str	r3, [r7, #8]
    }
    uint16_t val_ADC_channel = adc_dma_buffer;
 80002aa:	4b18      	ldr	r3, [pc, #96]	@ (800030c <main+0xd8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	80fb      	strh	r3, [r7, #6]

    //Convert adc values to actual voltage values
    strain_vout = ((ADC_REF_VOLTAGE * val_ADC_channel) / ADC_RESOLUTION);
 80002b0:	88fb      	ldrh	r3, [r7, #6]
 80002b2:	ee07 3a90 	vmov	s15, r3
 80002b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ba:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000314 <main+0xe0>
 80002be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80002c2:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8000318 <main+0xe4>
 80002c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ca:	edc7 7a00 	vstr	s15, [r7]
    //Calculate Strain
    median_strain += (STRAIN_SCALE*strain_vout-STRAIN_OFFSET)/STRAIN_DIVISOR*GF;
 80002ce:	edd7 7a00 	vldr	s15, [r7]
 80002d2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80002d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80002da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80002de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80002e2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800031c <main+0xe8>
 80002e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80002ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80002f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002f6:	edc7 7a02 	vstr	s15, [r7, #8]
    i++;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  {
 8000300:	e7bf      	b.n	8000282 <main+0x4e>
 8000302:	bf00      	nop
 8000304:	200000d4 	.word	0x200000d4
 8000308:	20000040 	.word	0x20000040
 800030c:	200000fc 	.word	0x200000fc
 8000310:	48001400 	.word	0x48001400
 8000314:	40533333 	.word	0x40533333
 8000318:	45800000 	.word	0x45800000
 800031c:	43fa0000 	.word	0x43fa0000

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	@ 0x58
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800032a:	2228      	movs	r2, #40	@ 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 fc0e 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 031c 	add.w	r3, r7, #28
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
 8000350:	611a      	str	r2, [r3, #16]
 8000352:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000354:	2302      	movs	r3, #2
 8000356:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035c:	2310      	movs	r3, #16
 800035e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000360:	2302      	movs	r3, #2
 8000362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000364:	2300      	movs	r3, #0
 8000366:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800036c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000372:	4618      	mov	r0, r3
 8000374:	f002 f8f8 	bl	8002568 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800037e:	f000 f935 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000386:	2300      	movs	r3, #0
 8000388:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000396:	f107 031c 	add.w	r3, r7, #28
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f003 f8f1 	bl	8003584 <HAL_RCC_ClockConfig>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f920 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80003ac:	2380      	movs	r3, #128	@ 0x80
 80003ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003b4:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 faa5 	bl	8003908 <HAL_RCCEx_PeriphCLKConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80003c4:	f000 f912 	bl	80005ec <Error_Handler>
  }
}
 80003c8:	bf00      	nop
 80003ca:	3758      	adds	r7, #88	@ 0x58
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b08a      	sub	sp, #40	@ 0x28
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003d6:	f107 031c 	add.w	r3, r7, #28
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
 80003f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003f2:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <MX_ADC1_Init+0xdc>)
 80003f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003fa:	4b2c      	ldr	r3, [pc, #176]	@ (80004ac <MX_ADC1_Init+0xdc>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000400:	4b2a      	ldr	r3, [pc, #168]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000406:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800040c:	4b27      	ldr	r3, [pc, #156]	@ (80004ac <MX_ADC1_Init+0xdc>)
 800040e:	2201      	movs	r2, #1
 8000410:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000412:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000414:	2200      	movs	r2, #0
 8000416:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800041a:	4b24      	ldr	r3, [pc, #144]	@ (80004ac <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000420:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000422:	2201      	movs	r2, #1
 8000424:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000426:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800042c:	4b1f      	ldr	r3, [pc, #124]	@ (80004ac <MX_ADC1_Init+0xdc>)
 800042e:	2201      	movs	r2, #1
 8000430:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000432:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000434:	2201      	movs	r2, #1
 8000436:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ac <MX_ADC1_Init+0xdc>)
 800043c:	2204      	movs	r2, #4
 800043e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000442:	2200      	movs	r2, #0
 8000444:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000446:	4b19      	ldr	r3, [pc, #100]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044c:	4817      	ldr	r0, [pc, #92]	@ (80004ac <MX_ADC1_Init+0xdc>)
 800044e:	f000 fa9d 	bl	800098c <HAL_ADC_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000458:	f000 f8c8 	bl	80005ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800045c:	2300      	movs	r3, #0
 800045e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000460:	f107 031c 	add.w	r3, r7, #28
 8000464:	4619      	mov	r1, r3
 8000466:	4811      	ldr	r0, [pc, #68]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000468:	f001 f82c 	bl	80014c4 <HAL_ADCEx_MultiModeConfigChannel>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000472:	f000 f8bb 	bl	80005ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000476:	2301      	movs	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800047a:	2301      	movs	r3, #1
 800047c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	2300      	movs	r3, #0
 8000484:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	4619      	mov	r1, r3
 8000492:	4806      	ldr	r0, [pc, #24]	@ (80004ac <MX_ADC1_Init+0xdc>)
 8000494:	f000 fd58 	bl	8000f48 <HAL_ADC_ConfigChannel>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800049e:	f000 f8a5 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a2:	bf00      	nop
 80004a4:	3728      	adds	r7, #40	@ 0x28
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000040 	.word	0x20000040

080004b0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004b4:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <MX_CAN_Init+0x60>)
 80004b6:	4a17      	ldr	r2, [pc, #92]	@ (8000514 <MX_CAN_Init+0x64>)
 80004b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <MX_CAN_Init+0x60>)
 80004bc:	2210      	movs	r2, #16
 80004be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <MX_CAN_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <MX_CAN_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <MX_CAN_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <MX_CAN_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <MX_CAN_Init+0x60>)
 80004da:	2200      	movs	r2, #0
 80004dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <MX_CAN_Init+0x60>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <MX_CAN_Init+0x60>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <MX_CAN_Init+0x60>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <MX_CAN_Init+0x60>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <MX_CAN_Init+0x60>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004fc:	4804      	ldr	r0, [pc, #16]	@ (8000510 <MX_CAN_Init+0x60>)
 80004fe:	f001 f9d7 	bl	80018b0 <HAL_CAN_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000508:	f000 f870 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000d4 	.word	0x200000d4
 8000514:	40006400 	.word	0x40006400

08000518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	@ (8000550 <MX_DMA_Init+0x38>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <MX_DMA_Init+0x38>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <MX_DMA_Init+0x38>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f001 fca3 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f001 fcbc 	bl	8001ebe <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <MX_GPIO_Init+0x94>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1e      	ldr	r2, [pc, #120]	@ (80005e8 <MX_GPIO_Init+0x94>)
 8000570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <MX_GPIO_Init+0x94>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_GPIO_Init+0x94>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a18      	ldr	r2, [pc, #96]	@ (80005e8 <MX_GPIO_Init+0x94>)
 8000588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <MX_GPIO_Init+0x94>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b13      	ldr	r3, [pc, #76]	@ (80005e8 <MX_GPIO_Init+0x94>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a12      	ldr	r2, [pc, #72]	@ (80005e8 <MX_GPIO_Init+0x94>)
 80005a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_GPIO_Init+0x94>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_15, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f248 0104 	movw	r1, #32772	@ 0x8004
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f001 ffa2 	bl	8002504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80005c0:	f248 0304 	movw	r3, #32772	@ 0x8004
 80005c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	4619      	mov	r1, r3
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005dc:	f001 fe20 	bl	8002220 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_MspInit+0x44>)
 8000600:	699b      	ldr	r3, [r3, #24]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <HAL_MspInit+0x44>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6193      	str	r3, [r2, #24]
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_MspInit+0x44>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a08      	ldr	r2, [pc, #32]	@ (800063c <HAL_MspInit+0x44>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000660:	d14c      	bne.n	80006fc <HAL_ADC_MspInit+0xbc>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000662:	4b28      	ldr	r3, [pc, #160]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a27      	ldr	r2, [pc, #156]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 8000680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000684:	6153      	str	r3, [r2, #20]
 8000686:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <HAL_ADC_MspInit+0xc4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000692:	2301      	movs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f001 fdba 	bl	8002220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006ac:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <HAL_ADC_MspInit+0xcc>)
 80006b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006b2:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006be:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006c0:	2280      	movs	r2, #128	@ 0x80
 80006c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006c4:	4b10      	ldr	r3, [pc, #64]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006e2:	f001 fc06 	bl	8001ef2 <HAL_DMA_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80006ec:	f7ff ff7e 	bl	80005ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a05      	ldr	r2, [pc, #20]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <HAL_ADC_MspInit+0xc8>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	@ 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	20000090 	.word	0x20000090
 800070c:	40020008 	.word	0x40020008

08000710 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a18      	ldr	r2, [pc, #96]	@ (8000790 <HAL_CAN_MspInit+0x80>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d129      	bne.n	8000786 <HAL_CAN_MspInit+0x76>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000732:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 8000738:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a11      	ldr	r2, [pc, #68]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <HAL_CAN_MspInit+0x84>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000762:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000774:	2309      	movs	r3, #9
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	4619      	mov	r1, r3
 800077e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000782:	f001 fd4d 	bl	8002220 <HAL_GPIO_Init>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	@ 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40006400 	.word	0x40006400
 8000794:	40021000 	.word	0x40021000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800079c:	bf00      	nop
 800079e:	e7fd      	b.n	800079c <NMI_Handler+0x4>

080007a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <HardFault_Handler+0x4>

080007a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <MemManage_Handler+0x4>

080007b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f88f 	bl	8000910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007fc:	4802      	ldr	r0, [pc, #8]	@ (8000808 <DMA1_Channel1_IRQHandler+0x10>)
 80007fe:	f001 fc1e 	bl	800203e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000090 	.word	0x20000090

0800080c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000868 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000834:	f7ff ffea 	bl	800080c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <LoopForever+0x6>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	@ (8000870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <LoopForever+0xe>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	@ (800087c <LoopForever+0x16>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f003 f97f 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000862:	f7ff fce7 	bl	8000234 <main>

08000866 <LoopForever>:

LoopForever:
    b LoopForever
 8000866:	e7fe      	b.n	8000866 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000868:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000874:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000878:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800087c:	20000104 	.word	0x20000104

08000880 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC1_2_IRQHandler>
	...

08000884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_Init+0x28>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_Init+0x28>)
 800088e:	f043 0310 	orr.w	r3, r3, #16
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f001 faeb 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff feaa 	bl	80005f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40022000 	.word	0x40022000

080008b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f001 fb03 	bl	8001eda <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008ec:	f001 facb 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	@ (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000018 	.word	0x20000018
 8000908:	20000020 	.word	0x20000020
 800090c:	2000001c 	.word	0x2000001c

08000910 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000020 	.word	0x20000020
 8000934:	20000100 	.word	0x20000100

08000938 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;  
 800093c:	4b03      	ldr	r3, [pc, #12]	@ (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20000100 	.word	0x20000100

08000950 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09a      	sub	sp, #104	@ 0x68
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800099a:	2300      	movs	r3, #0
 800099c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d101      	bne.n	80009ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e172      	b.n	8000c92 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d176      	bne.n	8000aac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d152      	bne.n	8000a6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2200      	movs	r2, #0
 80009ca:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff fe2d 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d13b      	bne.n	8000a6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 fef5 	bl	80017e4 <ADC_Disable>
 80009fa:	4603      	mov	r3, r0
 80009fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d12f      	bne.n	8000a6c <HAL_ADC_Init+0xe0>
 8000a0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d12b      	bne.n	8000a6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a1c:	f023 0302 	bic.w	r3, r3, #2
 8000a20:	f043 0202 	orr.w	r2, r3, #2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000a36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000a46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a48:	4b94      	ldr	r3, [pc, #592]	@ (8000c9c <HAL_ADC_Init+0x310>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a94      	ldr	r2, [pc, #592]	@ (8000ca0 <HAL_ADC_Init+0x314>)
 8000a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a52:	0c9a      	lsrs	r2, r3, #18
 8000a54:	4613      	mov	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	4413      	add	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a5e:	e002      	b.n	8000a66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1f9      	bne.n	8000a60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a88:	d110      	bne.n	8000aac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f023 0312 	bic.w	r3, r3, #18
 8000a92:	f043 0210 	orr.w	r2, r3, #16
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	f043 0201 	orr.w	r2, r3, #1
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 80df 	bne.w	8000c78 <HAL_ADC_Init+0x2ec>
 8000aba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f040 80da 	bne.w	8000c78 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 80d2 	bne.w	8000c78 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000adc:	f043 0202 	orr.w	r2, r3, #2
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8000ca4 <HAL_ADC_Init+0x318>)
 8000ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000af0:	d102      	bne.n	8000af8 <HAL_ADC_Init+0x16c>
 8000af2:	4b6d      	ldr	r3, [pc, #436]	@ (8000ca8 <HAL_ADC_Init+0x31c>)
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	e002      	b.n	8000afe <HAL_ADC_Init+0x172>
 8000af8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000afc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d108      	bne.n	8000b1e <HAL_ADC_Init+0x192>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d101      	bne.n	8000b1e <HAL_ADC_Init+0x192>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <HAL_ADC_Init+0x194>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d11c      	bne.n	8000b5e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d010      	beq.n	8000b4c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d107      	bne.n	8000b46 <HAL_ADC_Init+0x1ba>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d101      	bne.n	8000b46 <HAL_ADC_Init+0x1ba>
 8000b42:	2301      	movs	r3, #1
 8000b44:	e000      	b.n	8000b48 <HAL_ADC_Init+0x1bc>
 8000b46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d108      	bne.n	8000b5e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	7e5b      	ldrb	r3, [r3, #25]
 8000b62:	035b      	lsls	r3, r3, #13
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b68:	2a01      	cmp	r2, #1
 8000b6a:	d002      	beq.n	8000b72 <HAL_ADC_Init+0x1e6>
 8000b6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b70:	e000      	b.n	8000b74 <HAL_ADC_Init+0x1e8>
 8000b72:	2200      	movs	r2, #0
 8000b74:	431a      	orrs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	68db      	ldr	r3, [r3, #12]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000b84:	4313      	orrs	r3, r2
 8000b86:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d11b      	bne.n	8000bca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7e5b      	ldrb	r3, [r3, #25]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d109      	bne.n	8000bae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	045a      	lsls	r2, r3, #17
 8000ba2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000baa:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bac:	e00d      	b.n	8000bca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000bb6:	f043 0220 	orr.w	r2, r3, #32
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f043 0201 	orr.w	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d007      	beq.n	8000be2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000bde:	4313      	orrs	r3, r2
 8000be0:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d114      	bne.n	8000c1a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bfe:	f023 0302 	bic.w	r3, r3, #2
 8000c02:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	7e1b      	ldrb	r3, [r3, #24]
 8000c08:	039a      	lsls	r2, r3, #14
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4313      	orrs	r3, r2
 8000c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c16:	4313      	orrs	r3, r2
 8000c18:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <HAL_ADC_Init+0x320>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000c2a:	430b      	orrs	r3, r1
 8000c2c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	691b      	ldr	r3, [r3, #16]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d10c      	bne.n	8000c50 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3c:	f023 010f 	bic.w	r1, r3, #15
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	1e5a      	subs	r2, r3, #1
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c4e:	e007      	b.n	8000c60 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 020f 	bic.w	r2, r2, #15
 8000c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f023 0303 	bic.w	r3, r3, #3
 8000c6e:	f043 0201 	orr.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c76:	e00a      	b.n	8000c8e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f023 0312 	bic.w	r3, r3, #18
 8000c80:	f043 0210 	orr.w	r2, r3, #16
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c88:	2301      	movs	r3, #1
 8000c8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3768      	adds	r7, #104	@ 0x68
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000018 	.word	0x20000018
 8000ca0:	431bde83 	.word	0x431bde83
 8000ca4:	50000300 	.word	0x50000300
 8000ca8:	50000100 	.word	0x50000100
 8000cac:	fff0c007 	.word	0xfff0c007

08000cb0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 80b9 	bne.w	8000e42 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d101      	bne.n	8000cde <HAL_ADC_Start_DMA+0x2e>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e0b4      	b.n	8000e48 <HAL_ADC_Start_DMA+0x198>
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <HAL_ADC_Start_DMA+0x1a0>)
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f040 80a0 	bne.w	8000e34 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f000 fd11 	bl	800171c <ADC_Enable>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000cfe:	7dfb      	ldrb	r3, [r7, #23]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f040 8092 	bne.w	8000e2a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d0e:	f023 0301 	bic.w	r3, r3, #1
 8000d12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e50 <HAL_ADC_Start_DMA+0x1a0>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <HAL_ADC_Start_DMA+0x80>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d2e:	d115      	bne.n	8000d5c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d027      	beq.n	8000d9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000d5a:	e01e      	b.n	8000d9a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d70:	d004      	beq.n	8000d7c <HAL_ADC_Start_DMA+0xcc>
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a37      	ldr	r2, [pc, #220]	@ (8000e54 <HAL_ADC_Start_DMA+0x1a4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d10e      	bne.n	8000d9a <HAL_ADC_Start_DMA+0xea>
 8000d7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000da6:	d106      	bne.n	8000db6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dac:	f023 0206 	bic.w	r2, r3, #6
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dc8:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <HAL_ADC_Start_DMA+0x1a8>)
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd0:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <HAL_ADC_Start_DMA+0x1ac>)
 8000dd2:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <HAL_ADC_Start_DMA+0x1b0>)
 8000dda:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	221c      	movs	r2, #28
 8000de2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0210 	orr.w	r2, r2, #16
 8000df2:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3340      	adds	r3, #64	@ 0x40
 8000e0e:	4619      	mov	r1, r3
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f001 f8b4 	bl	8001f80 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0204 	orr.w	r2, r2, #4
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	e00d      	b.n	8000e46 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e32:	e008      	b.n	8000e46 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000e40:	e001      	b.n	8000e46 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e42:	2302      	movs	r3, #2
 8000e44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	50000300 	.word	0x50000300
 8000e54:	50000100 	.word	0x50000100
 8000e58:	08001651 	.word	0x08001651
 8000e5c:	080016cb 	.word	0x080016cb
 8000e60:	080016e7 	.word	0x080016e7

08000e64 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d101      	bne.n	8000e80 <HAL_ADCEx_Calibration_Start+0x1c>
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	e05f      	b.n	8000f40 <HAL_ADCEx_Calibration_Start+0xdc>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fcab 	bl	80017e4 <ADC_Disable>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d14e      	bne.n	8000f36 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000eac:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d107      	bne.n	8000ec4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ec2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000ed2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000ed4:	f7ff fd30 	bl	8000938 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000eda:	e01c      	b.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000edc:	f7ff fd2c 	bl	8000938 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d915      	bls.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ef8:	d10d      	bne.n	8000f16 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f023 0312 	bic.w	r3, r3, #18
 8000f02:	f043 0210 	orr.w	r2, r3, #16
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e014      	b.n	8000f40 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000f20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000f24:	d0da      	beq.n	8000edc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f023 0303 	bic.w	r3, r3, #3
 8000f2e:	f043 0201 	orr.w	r2, r3, #1
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b09b      	sub	sp, #108	@ 0x6c
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x22>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e2a1      	b.n	80014ae <HAL_ADC_ConfigChannel+0x566>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f040 8285 	bne.w	800148c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d81c      	bhi.n	8000fc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	4413      	add	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	231f      	movs	r3, #31
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4019      	ands	r1, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6818      	ldr	r0, [r3, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fc2:	e063      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d81e      	bhi.n	800100a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	3b1e      	subs	r3, #30
 8000fe0:	221f      	movs	r2, #31
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	4019      	ands	r1, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	3b1e      	subs	r3, #30
 8000ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
 8001008:	e040      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b0e      	cmp	r3, #14
 8001010:	d81e      	bhi.n	8001050 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	3b3c      	subs	r3, #60	@ 0x3c
 8001026:	221f      	movs	r2, #31
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	4019      	ands	r1, r3
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	3b3c      	subs	r3, #60	@ 0x3c
 8001042:	fa00 f203 	lsl.w	r2, r0, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	430a      	orrs	r2, r1
 800104c:	639a      	str	r2, [r3, #56]	@ 0x38
 800104e:	e01d      	b.n	800108c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4413      	add	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	3b5a      	subs	r3, #90	@ 0x5a
 8001064:	221f      	movs	r2, #31
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	4019      	ands	r1, r3
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	3b5a      	subs	r3, #90	@ 0x5a
 8001080:	fa00 f203 	lsl.w	r2, r0, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80e5 	bne.w	8001266 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b09      	cmp	r3, #9
 80010a2:	d91c      	bls.n	80010de <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6999      	ldr	r1, [r3, #24]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	3b1e      	subs	r3, #30
 80010b6:	2207      	movs	r2, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6898      	ldr	r0, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	3b1e      	subs	r3, #30
 80010d0:	fa00 f203 	lsl.w	r2, r0, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	619a      	str	r2, [r3, #24]
 80010dc:	e019      	b.n	8001112 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6959      	ldr	r1, [r3, #20]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	2207      	movs	r2, #7
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4019      	ands	r1, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6898      	ldr	r0, [r3, #8]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	fa00 f203 	lsl.w	r2, r0, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	3b01      	subs	r3, #1
 8001130:	2b03      	cmp	r3, #3
 8001132:	d84f      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x28c>
 8001134:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <HAL_ADC_ConfigChannel+0x1f4>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800114d 	.word	0x0800114d
 8001140:	0800116f 	.word	0x0800116f
 8001144:	08001191 	.word	0x08001191
 8001148:	080011b3 	.word	0x080011b3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001152:	4b9c      	ldr	r3, [pc, #624]	@ (80013c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001154:	4013      	ands	r3, r2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	6812      	ldr	r2, [r2, #0]
 800115a:	0691      	lsls	r1, r2, #26
 800115c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800115e:	430a      	orrs	r2, r1
 8001160:	431a      	orrs	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800116a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800116c:	e07b      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001174:	4b93      	ldr	r3, [pc, #588]	@ (80013c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001176:	4013      	ands	r3, r2
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	0691      	lsls	r1, r2, #26
 800117e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001180:	430a      	orrs	r2, r1
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800118c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800118e:	e06a      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001196:	4b8b      	ldr	r3, [pc, #556]	@ (80013c4 <HAL_ADC_ConfigChannel+0x47c>)
 8001198:	4013      	ands	r3, r2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	6812      	ldr	r2, [r2, #0]
 800119e:	0691      	lsls	r1, r2, #26
 80011a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011a2:	430a      	orrs	r2, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011ae:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011b0:	e059      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80011b8:	4b82      	ldr	r3, [pc, #520]	@ (80013c4 <HAL_ADC_ConfigChannel+0x47c>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	6812      	ldr	r2, [r2, #0]
 80011c0:	0691      	lsls	r1, r2, #26
 80011c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011c4:	430a      	orrs	r2, r1
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80011d0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80011d2:	e048      	b.n	8001266 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	069b      	lsls	r3, r3, #26
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d107      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	069b      	lsls	r3, r3, #26
 8001208:	429a      	cmp	r2, r3
 800120a:	d107      	bne.n	800121c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800121a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001222:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	069b      	lsls	r3, r3, #26
 800122c:	429a      	cmp	r2, r3
 800122e:	d107      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800123e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001246:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	069b      	lsls	r3, r3, #26
 8001250:	429a      	cmp	r2, r3
 8001252:	d107      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001262:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001264:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b01      	cmp	r3, #1
 8001272:	d108      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x33e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x33e>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_ADC_ConfigChannel+0x340>
 8001286:	2300      	movs	r3, #0
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 810a 	bne.w	80014a2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d00f      	beq.n	80012b6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43da      	mvns	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	400a      	ands	r2, r1
 80012b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80012b4:	e049      	b.n	800134a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	409a      	lsls	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b09      	cmp	r3, #9
 80012d6:	d91c      	bls.n	8001312 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6999      	ldr	r1, [r3, #24]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	3b1b      	subs	r3, #27
 80012ea:	2207      	movs	r2, #7
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4019      	ands	r1, r3
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	6898      	ldr	r0, [r3, #8]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	3b1b      	subs	r3, #27
 8001304:	fa00 f203 	lsl.w	r2, r0, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	430a      	orrs	r2, r1
 800130e:	619a      	str	r2, [r3, #24]
 8001310:	e01b      	b.n	800134a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6959      	ldr	r1, [r3, #20]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	2207      	movs	r2, #7
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	4019      	ands	r1, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	6898      	ldr	r0, [r3, #8]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	fa00 f203 	lsl.w	r2, r0, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <HAL_ADC_ConfigChannel+0x480>)
 800134c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b10      	cmp	r3, #16
 8001354:	d105      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	d015      	beq.n	800138e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001366:	2b11      	cmp	r3, #17
 8001368:	d105      	bne.n	8001376 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800136a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800137a:	2b12      	cmp	r3, #18
 800137c:	f040 8091 	bne.w	80014a2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 808a 	bne.w	80014a2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001396:	d102      	bne.n	800139e <HAL_ADC_ConfigChannel+0x456>
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_ADC_ConfigChannel+0x484>)
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e002      	b.n	80013a4 <HAL_ADC_ConfigChannel+0x45c>
 800139e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80013a2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d10e      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x488>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d107      	bne.n	80013d0 <HAL_ADC_ConfigChannel+0x488>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e006      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x48a>
 80013c4:	83fff000 	.word	0x83fff000
 80013c8:	50000300 	.word	0x50000300
 80013cc:	50000100 	.word	0x50000100
 80013d0:	2300      	movs	r3, #0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d150      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d010      	beq.n	80013fe <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x4b0>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x4b0>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_ADC_ConfigChannel+0x4b2>
 80013f8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d13c      	bne.n	8001478 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b10      	cmp	r3, #16
 8001404:	d11d      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x4fa>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800140e:	d118      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_ADC_ConfigChannel+0x574>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <HAL_ADC_ConfigChannel+0x578>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9a      	lsrs	r2, r3, #18
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001432:	e002      	b.n	800143a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3b01      	subs	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f9      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001440:	e02e      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b11      	cmp	r3, #17
 8001448:	d10b      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x51a>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001452:	d106      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800145c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800145e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001460:	e01e      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b12      	cmp	r3, #18
 8001468:	d11a      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800146a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001474:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001476:	e013      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800148a:	e00a      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f043 0220 	orr.w	r2, r3, #32
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800149e:	e000      	b.n	80014a2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80014a0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	376c      	adds	r7, #108	@ 0x6c
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20000018 	.word	0x20000018
 80014c0:	431bde83 	.word	0x431bde83

080014c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b099      	sub	sp, #100	@ 0x64
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014dc:	d102      	bne.n	80014e4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80014de:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	e002      	b.n	80014ea <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80014e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0a2      	b.n	800163a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80014fe:	2302      	movs	r3, #2
 8001500:	e09b      	b.n	800163a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d17f      	bne.n	8001618 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d179      	bne.n	8001618 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001524:	4b49      	ldr	r3, [pc, #292]	@ (800164c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001526:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d040      	beq.n	80015b2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001542:	035b      	lsls	r3, r3, #13
 8001544:	430b      	orrs	r3, r1
 8001546:	431a      	orrs	r2, r3
 8001548:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800154a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0303 	and.w	r3, r3, #3
 8001556:	2b01      	cmp	r3, #1
 8001558:	d108      	bne.n	800156c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800156c:	2300      	movs	r3, #0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d15c      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800158e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001590:	2b00      	cmp	r3, #0
 8001592:	d14b      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800159c:	f023 030f 	bic.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	6811      	ldr	r1, [r2, #0]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	6892      	ldr	r2, [r2, #8]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015ae:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015b0:	e03c      	b.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80015b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015bc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d108      	bne.n	80015de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80015de:	2300      	movs	r3, #0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d123      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d107      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001600:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001602:	2b00      	cmp	r3, #0
 8001604:	d112      	bne.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800160e:	f023 030f 	bic.w	r3, r3, #15
 8001612:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001614:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001616:	e009      	b.n	800162c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	f043 0220 	orr.w	r2, r3, #32
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800162a:	e000      	b.n	800162e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800162c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001636:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800163a:	4618      	mov	r0, r3
 800163c:	3764      	adds	r7, #100	@ 0x64
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	50000100 	.word	0x50000100
 800164c:	50000300 	.word	0x50000300

08001650 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001666:	2b00      	cmp	r3, #0
 8001668:	d126      	bne.n	80016b8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001680:	2b00      	cmp	r3, #0
 8001682:	d115      	bne.n	80016b0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001688:	2b00      	cmp	r3, #0
 800168a:	d111      	bne.n	80016b0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7ff f94d 	bl	8000950 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016b6:	e004      	b.n	80016c2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff f943 	bl	8000964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001704:	f043 0204 	orr.w	r2, r3, #4
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff f933 	bl	8000978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d108      	bne.n	8001748 <ADC_Enable+0x2c>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <ADC_Enable+0x2c>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <ADC_Enable+0x2e>
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d143      	bne.n	80017d6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <ADC_Enable+0xc4>)
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00d      	beq.n	8001778 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f043 0210 	orr.w	r2, r3, #16
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e02f      	b.n	80017d8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001788:	f7ff f8d6 	bl	8000938 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800178e:	e01b      	b.n	80017c8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001790:	f7ff f8d2 	bl	8000938 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d914      	bls.n	80017c8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d00d      	beq.n	80017c8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f043 0210 	orr.w	r2, r3, #16
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017bc:	f043 0201 	orr.w	r2, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e007      	b.n	80017d8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d1dc      	bne.n	8001790 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	8000003f 	.word	0x8000003f

080017e4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <ADC_Disable+0x2c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <ADC_Disable+0x2c>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <ADC_Disable+0x2e>
 8001810:	2300      	movs	r3, #0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d047      	beq.n	80018a6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030d 	and.w	r3, r3, #13
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10f      	bne.n	8001844 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f042 0202 	orr.w	r2, r2, #2
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2203      	movs	r2, #3
 800183a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800183c:	f7ff f87c 	bl	8000938 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001842:	e029      	b.n	8001898 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	f043 0210 	orr.w	r2, r3, #16
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001854:	f043 0201 	orr.w	r2, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e023      	b.n	80018a8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001860:	f7ff f86a 	bl	8000938 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d914      	bls.n	8001898 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10d      	bne.n	8001898 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f043 0210 	orr.w	r2, r3, #16
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e007      	b.n	80018a8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d0dc      	beq.n	8001860 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e0ed      	b.n	8001a9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d102      	bne.n	80018d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7fe ff1e 	bl	8000710 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0201 	orr.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e4:	f7ff f828 	bl	8000938 <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ea:	e012      	b.n	8001912 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ec:	f7ff f824 	bl	8000938 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b0a      	cmp	r3, #10
 80018f8:	d90b      	bls.n	8001912 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2205      	movs	r2, #5
 800190a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0c5      	b.n	8001a9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0e5      	beq.n	80018ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0202 	bic.w	r2, r2, #2
 800192e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001930:	f7ff f802 	bl	8000938 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001936:	e012      	b.n	800195e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001938:	f7fe fffe 	bl	8000938 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b0a      	cmp	r3, #10
 8001944:	d90b      	bls.n	800195e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e09f      	b.n	8001a9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1e5      	bne.n	8001938 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7e1b      	ldrb	r3, [r3, #24]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d108      	bne.n	8001986 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e007      	b.n	8001996 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e5b      	ldrb	r3, [r3, #25]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d108      	bne.n	80019b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e007      	b.n	80019c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7e9b      	ldrb	r3, [r3, #26]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d108      	bne.n	80019da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	e007      	b.n	80019ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0220 	bic.w	r2, r2, #32
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7edb      	ldrb	r3, [r3, #27]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0210 	bic.w	r2, r2, #16
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	e007      	b.n	8001a14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0210 	orr.w	r2, r2, #16
 8001a12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7f1b      	ldrb	r3, [r3, #28]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0208 	orr.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	e007      	b.n	8001a3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0208 	bic.w	r2, r2, #8
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7f5b      	ldrb	r3, [r3, #29]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0204 	orr.w	r2, r2, #4
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e007      	b.n	8001a68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0204 	bic.w	r2, r2, #4
 8001a66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	ea42 0103 	orr.w	r1, r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d12e      	bne.n	8001b18 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ad2:	f7fe ff31 	bl	8000938 <HAL_GetTick>
 8001ad6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ad8:	e012      	b.n	8001b00 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ada:	f7fe ff2d 	bl	8000938 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b0a      	cmp	r3, #10
 8001ae6:	d90b      	bls.n	8001b00 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2205      	movs	r2, #5
 8001af8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e012      	b.n	8001b26 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1e5      	bne.n	8001ada <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e006      	b.n	8001b26 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b089      	sub	sp, #36	@ 0x24
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b42:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4c:	7ffb      	ldrb	r3, [r7, #31]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d003      	beq.n	8001b5a <HAL_CAN_AddTxMessage+0x2c>
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	f040 80ad 	bne.w	8001cb4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10a      	bne.n	8001b7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d105      	bne.n	8001b7a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8095 	beq.w	8001ca4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	0e1b      	lsrs	r3, r3, #24
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b84:	2201      	movs	r2, #1
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	6809      	ldr	r1, [r1, #0]
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3318      	adds	r3, #24
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	440b      	add	r3, r1
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	e00f      	b.n	8001bd2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bbc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc2:	68f9      	ldr	r1, [r7, #12]
 8001bc4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001bc6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3318      	adds	r3, #24
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	440b      	add	r3, r1
 8001bd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6819      	ldr	r1, [r3, #0]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3318      	adds	r3, #24
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	3304      	adds	r3, #4
 8001be4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	7d1b      	ldrb	r3, [r3, #20]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d111      	bne.n	8001c12 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3304      	adds	r3, #4
 8001c10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3307      	adds	r3, #7
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3306      	adds	r3, #6
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3305      	adds	r3, #5
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	3204      	adds	r2, #4
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	4610      	mov	r0, r2
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	6811      	ldr	r1, [r2, #0]
 8001c3a:	ea43 0200 	orr.w	r2, r3, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	440b      	add	r3, r1
 8001c44:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3303      	adds	r3, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	061a      	lsls	r2, r3, #24
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3302      	adds	r3, #2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4313      	orrs	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	6811      	ldr	r1, [r2, #0]
 8001c70:	ea43 0200 	orr.w	r2, r3, r0
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	440b      	add	r3, r1
 8001c7a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001c7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3318      	adds	r3, #24
 8001c88:	011b      	lsls	r3, r3, #4
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6811      	ldr	r1, [r2, #0]
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	3318      	adds	r3, #24
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	440b      	add	r3, r1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e00e      	b.n	8001cc2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e006      	b.n	8001cc2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
  }
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	@ (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	@ (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	@ (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	@ (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	@ 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	@ 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	@ (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	@ (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e037      	b.n	8001f78 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f1e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f940 	bl	80021e0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Start_IT+0x20>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e04a      	b.n	8002036 <HAL_DMA_Start_IT+0xb6>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d13a      	bne.n	8002028 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f8d4 	bl	8002184 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 020e 	orr.w	r2, r2, #14
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e00f      	b.n	8002016 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 020a 	orr.w	r2, r2, #10
 8002004:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e005      	b.n	8002034 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002030:	2302      	movs	r3, #2
 8002032:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002034:	7dfb      	ldrb	r3, [r7, #23]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	2204      	movs	r2, #4
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d024      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x72>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01f      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0320 	and.w	r3, r3, #32
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0204 	bic.w	r2, r2, #4
 800208c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002096:	2104      	movs	r1, #4
 8002098:	fa01 f202 	lsl.w	r2, r1, r2
 800209c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d06a      	beq.n	800217c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020ae:	e065      	b.n	800217c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	2202      	movs	r2, #2
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02c      	beq.n	800211a <HAL_DMA_IRQHandler+0xdc>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d027      	beq.n	800211a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0320 	and.w	r3, r3, #32
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 020a 	bic.w	r2, r2, #10
 80020e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f8:	2102      	movs	r1, #2
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	d035      	beq.n	800217c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002118:	e030      	b.n	800217c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2208      	movs	r2, #8
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d028      	beq.n	800217c <HAL_DMA_IRQHandler+0x13e>
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 020e 	bic.w	r2, r2, #14
 8002142:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f202 	lsl.w	r2, r1, r2
 8002152:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
    }
  }
}
 800217a:	e7ff      	b.n	800217c <HAL_DMA_IRQHandler+0x13e>
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219a:	2101      	movs	r1, #1
 800219c:	fa01 f202 	lsl.w	r2, r1, r2
 80021a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d108      	bne.n	80021c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021c2:	e007      	b.n	80021d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <DMA_CalcBaseAndBitshift+0x34>)
 80021f0:	4413      	add	r3, r2
 80021f2:	4a09      	ldr	r2, [pc, #36]	@ (8002218 <DMA_CalcBaseAndBitshift+0x38>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	009a      	lsls	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a06      	ldr	r2, [pc, #24]	@ (800221c <DMA_CalcBaseAndBitshift+0x3c>)
 8002204:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	bffdfff8 	.word	0xbffdfff8
 8002218:	cccccccd 	.word	0xcccccccd
 800221c:	40020000 	.word	0x40020000

08002220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e14e      	b.n	80024ce <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2101      	movs	r1, #1
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	4013      	ands	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8140 	beq.w	80024c8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b01      	cmp	r3, #1
 8002252:	d005      	beq.n	8002260 <HAL_GPIO_Init+0x40>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d130      	bne.n	80022c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002296:	2201      	movs	r2, #1
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4013      	ands	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0201 	and.w	r2, r3, #1
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d017      	beq.n	80022fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	2203      	movs	r2, #3
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4013      	ands	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d123      	bne.n	8002352 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	6939      	ldr	r1, [r7, #16]
 800234e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0203 	and.w	r2, r3, #3
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 809a 	beq.w	80024c8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002394:	4b55      	ldr	r3, [pc, #340]	@ (80024ec <HAL_GPIO_Init+0x2cc>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a54      	ldr	r2, [pc, #336]	@ (80024ec <HAL_GPIO_Init+0x2cc>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b52      	ldr	r3, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x2cc>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ac:	4a50      	ldr	r2, [pc, #320]	@ (80024f0 <HAL_GPIO_Init+0x2d0>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023d6:	d013      	beq.n	8002400 <HAL_GPIO_Init+0x1e0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <HAL_GPIO_Init+0x2d4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00d      	beq.n	80023fc <HAL_GPIO_Init+0x1dc>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a45      	ldr	r2, [pc, #276]	@ (80024f8 <HAL_GPIO_Init+0x2d8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d007      	beq.n	80023f8 <HAL_GPIO_Init+0x1d8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a44      	ldr	r2, [pc, #272]	@ (80024fc <HAL_GPIO_Init+0x2dc>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d101      	bne.n	80023f4 <HAL_GPIO_Init+0x1d4>
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 80023f4:	2305      	movs	r3, #5
 80023f6:	e004      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e002      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_GPIO_Init+0x1e2>
 8002400:	2300      	movs	r3, #0
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	f002 0203 	and.w	r2, r2, #3
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	4093      	lsls	r3, r2
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002412:	4937      	ldr	r1, [pc, #220]	@ (80024f0 <HAL_GPIO_Init+0x2d0>)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002420:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002444:	4a2e      	ldr	r2, [pc, #184]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800246e:	4a24      	ldr	r2, [pc, #144]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002498:	4a19      	ldr	r2, [pc, #100]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4013      	ands	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002500 <HAL_GPIO_Init+0x2e0>)
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3301      	adds	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f47f aea9 	bne.w	8002230 <HAL_GPIO_Init+0x10>
  }
}
 80024de:	bf00      	nop
 80024e0:	bf00      	nop
 80024e2:	371c      	adds	r7, #28
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010000 	.word	0x40010000
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800
 80024fc:	48000c00 	.word	0x48000c00
 8002500:	40010400 	.word	0x40010400

08002504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
 8002510:	4613      	mov	r3, r2
 8002512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002514:	787b      	ldrb	r3, [r7, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002520:	e002      	b.n	8002528 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	041a      	lsls	r2, r3, #16
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43d9      	mvns	r1, r3
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	400b      	ands	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800256e:	af00      	add	r7, sp, #0
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002578:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	f000 bff4 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 816d 	beq.w	800287e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025a4:	4bb4      	ldr	r3, [pc, #720]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b0:	4bb1      	ldr	r3, [pc, #708]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d157      	bne.n	800266c <HAL_RCC_OscConfig+0x104>
 80025bc:	4bae      	ldr	r3, [pc, #696]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c8:	d150      	bne.n	800266c <HAL_RCC_OscConfig+0x104>
 80025ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025ce:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80025ea:	d802      	bhi.n	80025f2 <HAL_RCC_OscConfig+0x8a>
 80025ec:	4ba2      	ldr	r3, [pc, #648]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0xb6>
 80025f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002606:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800260a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800260e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800261a:	4b97      	ldr	r3, [pc, #604]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002622:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002626:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002632:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002636:	fab2 f282 	clz	r2, r2
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f042 0220 	orr.w	r2, r2, #32
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f002 021f 	and.w	r2, r2, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8114 	beq.w	800287c <HAL_RCC_OscConfig+0x314>
 8002654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f040 810b 	bne.w	800287c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	f000 bf85 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x124>
 800267e:	4b7e      	ldr	r3, [pc, #504]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a7d      	ldr	r2, [pc, #500]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e036      	b.n	80026fa <HAL_RCC_OscConfig+0x192>
 800268c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002690:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x14e>
 800269c:	4b76      	ldr	r3, [pc, #472]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a75      	ldr	r2, [pc, #468]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	4b73      	ldr	r3, [pc, #460]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a72      	ldr	r2, [pc, #456]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e021      	b.n	80026fa <HAL_RCC_OscConfig+0x192>
 80026b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x17a>
 80026c8:	4b6b      	ldr	r3, [pc, #428]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	4b68      	ldr	r3, [pc, #416]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a67      	ldr	r2, [pc, #412]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x192>
 80026e2:	4b65      	ldr	r3, [pc, #404]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a64      	ldr	r2, [pc, #400]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b62      	ldr	r3, [pc, #392]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a61      	ldr	r2, [pc, #388]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002706:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	495a      	ldr	r1, [pc, #360]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002710:	4313      	orrs	r3, r2
 8002712:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d054      	beq.n	80027ce <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe f908 	bl	8000938 <HAL_GetTick>
 8002728:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272c:	e00a      	b.n	8002744 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272e:	f7fe f903 	bl	8000938 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	@ 0x64
 800273c:	d902      	bls.n	8002744 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	f000 bf19 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 8002744:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002748:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002750:	fa93 f3a3 	rbit	r3, r3
 8002754:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002758:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b3f      	cmp	r3, #63	@ 0x3f
 8002764:	d802      	bhi.n	800276c <HAL_RCC_OscConfig+0x204>
 8002766:	4b44      	ldr	r3, [pc, #272]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	e015      	b.n	8002798 <HAL_RCC_OscConfig+0x230>
 800276c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002770:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002774:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002780:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002784:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002788:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002794:	4b38      	ldr	r3, [pc, #224]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800279c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80027a0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80027a4:	fa92 f2a2 	rbit	r2, r2
 80027a8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80027ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80027b0:	fab2 f282 	clz	r2, r2
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	f042 0220 	orr.w	r2, r2, #32
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f002 021f 	and.w	r2, r2, #31
 80027c0:	2101      	movs	r1, #1
 80027c2:	fa01 f202 	lsl.w	r2, r1, r2
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0b0      	beq.n	800272e <HAL_RCC_OscConfig+0x1c6>
 80027cc:	e057      	b.n	800287e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe f8b3 	bl	8000938 <HAL_GetTick>
 80027d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe f8ae 	bl	8000938 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b64      	cmp	r3, #100	@ 0x64
 80027e6:	d902      	bls.n	80027ee <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	f000 bec4 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 80027ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027f2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002802:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b3f      	cmp	r3, #63	@ 0x3f
 800280e:	d802      	bhi.n	8002816 <HAL_RCC_OscConfig+0x2ae>
 8002810:	4b19      	ldr	r3, [pc, #100]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x2da>
 8002816:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800281a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800282a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800282e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002832:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <HAL_RCC_OscConfig+0x310>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002842:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002846:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800284a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800284e:	fa92 f2a2 	rbit	r2, r2
 8002852:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002856:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	f042 0220 	orr.w	r2, r2, #32
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	f002 021f 	and.w	r2, r2, #31
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	4013      	ands	r3, r2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1b0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x270>
 8002876:	e002      	b.n	800287e <HAL_RCC_OscConfig+0x316>
 8002878:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 816c 	beq.w	8002b6c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002894:	4bcc      	ldr	r3, [pc, #816]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028a0:	4bc9      	ldr	r3, [pc, #804]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d16d      	bne.n	8002988 <HAL_RCC_OscConfig+0x420>
 80028ac:	4bc6      	ldr	r3, [pc, #792]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d167      	bne.n	8002988 <HAL_RCC_OscConfig+0x420>
 80028b8:	2302      	movs	r3, #2
 80028ba:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80028ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80028d6:	d802      	bhi.n	80028de <HAL_RCC_OscConfig+0x376>
 80028d8:	4bbb      	ldr	r3, [pc, #748]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	e013      	b.n	8002906 <HAL_RCC_OscConfig+0x39e>
 80028de:	2302      	movs	r3, #2
 80028e0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028e8:	fa93 f3a3 	rbit	r3, r3
 80028ec:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028f0:	2302      	movs	r3, #2
 80028f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002902:	4bb1      	ldr	r3, [pc, #708]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2202      	movs	r2, #2
 8002908:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800290c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002910:	fa92 f2a2 	rbit	r2, r2
 8002914:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002918:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCC_OscConfig+0x3e6>
 8002938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d002      	beq.n	800294e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	f000 be14 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800295a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	21f8      	movs	r1, #248	@ 0xf8
 8002964:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800296c:	fa91 f1a1 	rbit	r1, r1
 8002970:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002974:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002978:	fab1 f181 	clz	r1, r1
 800297c:	b2c9      	uxtb	r1, r1
 800297e:	408b      	lsls	r3, r1
 8002980:	4991      	ldr	r1, [pc, #580]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e0f1      	b.n	8002b6c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8083 	beq.w	8002aa0 <HAL_RCC_OscConfig+0x538>
 800299a:	2301      	movs	r3, #1
 800299c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80029a4:	fa93 f3a3 	rbit	r3, r3
 80029a8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80029ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	461a      	mov	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fd ffb7 	bl	8000938 <HAL_GetTick>
 80029ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fd ffb2 	bl	8000938 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d902      	bls.n	80029e6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f000 bdc8 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	fab3 f383 	clz	r3, r3
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a04:	d802      	bhi.n	8002a0c <HAL_RCC_OscConfig+0x4a4>
 8002a06:	4b70      	ldr	r3, [pc, #448]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x4cc>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a1e:	2302      	movs	r3, #2
 8002a20:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002a24:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002a30:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	2202      	movs	r2, #2
 8002a36:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002a3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002a46:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	f042 0220 	orr.w	r2, r2, #32
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	f002 021f 	and.w	r2, r2, #31
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0b4      	beq.n	80029d0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a66:	4b58      	ldr	r3, [pc, #352]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	21f8      	movs	r1, #248	@ 0xf8
 8002a7c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a84:	fa91 f1a1 	rbit	r1, r1
 8002a88:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a8c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a90:	fab1 f181 	clz	r1, r1
 8002a94:	b2c9      	uxtb	r1, r1
 8002a96:	408b      	lsls	r3, r1
 8002a98:	494b      	ldr	r1, [pc, #300]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
 8002a9e:	e065      	b.n	8002b6c <HAL_RCC_OscConfig+0x604>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002ab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002ac0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd ff34 	bl	8000938 <HAL_GetTick>
 8002ad0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7fd ff2f 	bl	8000938 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	f000 bd45 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b0a:	d802      	bhi.n	8002b12 <HAL_RCC_OscConfig+0x5aa>
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	e013      	b.n	8002b3a <HAL_RCC_OscConfig+0x5d2>
 8002b12:	2302      	movs	r3, #2
 8002b14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002b24:	2302      	movs	r3, #2
 8002b26:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b2e:	fa93 f3a3 	rbit	r3, r3
 8002b32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b36:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <HAL_RCC_OscConfig+0x660>)
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002b40:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b4c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b50:	fab2 f282 	clz	r2, r2
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	f002 021f 	and.w	r2, r2, #31
 8002b60:	2101      	movs	r1, #1
 8002b62:	fa01 f202 	lsl.w	r2, r1, r2
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1b4      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8115 	beq.w	8002dac <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d07e      	beq.n	8002c90 <HAL_RCC_OscConfig+0x728>
 8002b92:	2301      	movs	r3, #1
 8002b94:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b06      	ldr	r3, [pc, #24]	@ (8002bcc <HAL_RCC_OscConfig+0x664>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7fd febc 	bl	8000938 <HAL_GetTick>
 8002bc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCC_OscConfig+0x67e>
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fd feb2 	bl	8000938 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d902      	bls.n	8002be6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	f000 bcc8 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 8002be6:	2302      	movs	r3, #2
 8002be8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c24:	2202      	movs	r2, #2
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	fa93 f2a3 	rbit	r2, r3
 8002c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002c3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c40:	4bb0      	ldr	r3, [pc, #704]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	6019      	str	r1, [r3, #0]
 8002c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	fa93 f1a3 	rbit	r1, r3
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c66:	6019      	str	r1, [r3, #0]
  return result;
 8002c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0a0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x668>
 8002c8e:	e08d      	b.n	8002dac <HAL_RCC_OscConfig+0x844>
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cb2:	601a      	str	r2, [r3, #0]
  return result;
 8002cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cb8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002cbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b90      	ldr	r3, [pc, #576]	@ (8002f08 <HAL_RCC_OscConfig+0x9a0>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2300      	movs	r3, #0
 8002cd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd2:	f7fd fe31 	bl	8000938 <HAL_GetTick>
 8002cd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cda:	e00a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fd fe2c 	bl	8000938 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d902      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	f000 bc42 	b.w	8003576 <HAL_RCC_OscConfig+0x100e>
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d1e:	2202      	movs	r2, #2
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	fa93 f2a3 	rbit	r2, r3
 8002d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d42:	2202      	movs	r2, #2
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	fa93 f2a3 	rbit	r2, r3
 8002d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5e:	4b69      	ldr	r3, [pc, #420]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	6019      	str	r1, [r3, #0]
 8002d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f1a3 	rbit	r1, r3
 8002d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d84:	6019      	str	r1, [r3, #0]
  return result;
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2101      	movs	r1, #1
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d197      	bne.n	8002cdc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 819e 	beq.w	80030fe <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dde:	61d3      	str	r3, [r2, #28]
 8002de0:	4b48      	ldr	r3, [pc, #288]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002de8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002dfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e02:	4b42      	ldr	r3, [pc, #264]	@ (8002f0c <HAL_RCC_OscConfig+0x9a4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <HAL_RCC_OscConfig+0x9a4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a3e      	ldr	r2, [pc, #248]	@ (8002f0c <HAL_RCC_OscConfig+0x9a4>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1a:	f7fd fd8d 	bl	8000938 <HAL_GetTick>
 8002e1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e22:	e009      	b.n	8002e38 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e24:	f7fd fd88 	bl	8000938 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	@ 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e39e      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b34      	ldr	r3, [pc, #208]	@ (8002f0c <HAL_RCC_OscConfig+0x9a4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ef      	beq.n	8002e24 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d106      	bne.n	8002e62 <HAL_RCC_OscConfig+0x8fa>
 8002e54:	4b2b      	ldr	r3, [pc, #172]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e5a:	f043 0301 	orr.w	r3, r3, #1
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	e035      	b.n	8002ece <HAL_RCC_OscConfig+0x966>
 8002e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x924>
 8002e72:	4b24      	ldr	r3, [pc, #144]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4a23      	ldr	r2, [pc, #140]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6213      	str	r3, [r2, #32]
 8002e7e:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	4a20      	ldr	r2, [pc, #128]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6213      	str	r3, [r2, #32]
 8002e8a:	e020      	b.n	8002ece <HAL_RCC_OscConfig+0x966>
 8002e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x94e>
 8002e9c:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6213      	str	r3, [r2, #32]
 8002ea8:	4b16      	ldr	r3, [pc, #88]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4a15      	ldr	r2, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6213      	str	r3, [r2, #32]
 8002eb4:	e00b      	b.n	8002ece <HAL_RCC_OscConfig+0x966>
 8002eb6:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6213      	str	r3, [r2, #32]
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <HAL_RCC_OscConfig+0x99c>)
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ece:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8087 	beq.w	8002fee <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fd2a 	bl	8000938 <HAL_GetTick>
 8002ee4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e012      	b.n	8002f10 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fd fd25 	bl	8000938 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d908      	bls.n	8002f10 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e339      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	10908120 	.word	0x10908120
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f18:	2202      	movs	r2, #2
 8002f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	fa93 f2a3 	rbit	r2, r3
 8002f2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f38:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f2a3 	rbit	r2, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_OscConfig+0xa10>
 8002f72:	4b98      	ldr	r3, [pc, #608]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	e013      	b.n	8002fa0 <HAL_RCC_OscConfig+0xa38>
 8002f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f96:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fa4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002fa8:	2102      	movs	r1, #2
 8002faa:	6011      	str	r1, [r2, #0]
 8002fac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fb0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	fa92 f1a2 	rbit	r1, r2
 8002fba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fbe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fc2:	6011      	str	r1, [r2, #0]
  return result;
 8002fc4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fc8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f43f af7f 	beq.w	8002eea <HAL_RCC_OscConfig+0x982>
 8002fec:	e07d      	b.n	80030ea <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fd fca3 	bl	8000938 <HAL_GetTick>
 8002ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff8:	f7fd fc9e 	bl	8000938 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e2b2      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003018:	2202      	movs	r2, #2
 800301a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	fa93 f2a3 	rbit	r2, r3
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003038:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	fa93 f2a3 	rbit	r2, r3
 800304e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003052:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003056:	601a      	str	r2, [r3, #0]
  return result;
 8003058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800305c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003060:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <HAL_RCC_OscConfig+0xb10>
 8003072:	4b58      	ldr	r3, [pc, #352]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	e013      	b.n	80030a0 <HAL_RCC_OscConfig+0xb38>
 8003078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800307c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003080:	2202      	movs	r2, #2
 8003082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003088:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	fa93 f2a3 	rbit	r2, r3
 8003092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003096:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030a4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80030a8:	2102      	movs	r1, #2
 80030aa:	6011      	str	r1, [r2, #0]
 80030ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	fa92 f1a2 	rbit	r1, r2
 80030ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030be:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030c2:	6011      	str	r1, [r2, #0]
  return result;
 80030c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80030c8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d186      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ea:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a37      	ldr	r2, [pc, #220]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 8232 	beq.w	8003574 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003110:	4b30      	ldr	r3, [pc, #192]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 030c 	and.w	r3, r3, #12
 8003118:	2b08      	cmp	r3, #8
 800311a:	f000 8201 	beq.w	8003520 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b02      	cmp	r3, #2
 800312c:	f040 8157 	bne.w	80033de <HAL_RCC_OscConfig+0xe76>
 8003130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003134:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003138:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800313c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003142:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f2a3 	rbit	r2, r3
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003154:	601a      	str	r2, [r3, #0]
  return result;
 8003156:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800315e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003160:	fab3 f383 	clz	r3, r3
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800316a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003176:	f7fd fbdf 	bl	8000938 <HAL_GetTick>
 800317a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317e:	e009      	b.n	8003194 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003180:	f7fd fbda 	bl	8000938 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1f0      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800319c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	fa93 f2a3 	rbit	r2, r3
 80031b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031b8:	601a      	str	r2, [r3, #0]
  return result;
 80031ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031be:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80031c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c4:	fab3 f383 	clz	r3, r3
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80031cc:	d804      	bhi.n	80031d8 <HAL_RCC_OscConfig+0xc70>
 80031ce:	4b01      	ldr	r3, [pc, #4]	@ (80031d4 <HAL_RCC_OscConfig+0xc6c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e029      	b.n	8003228 <HAL_RCC_OscConfig+0xcc0>
 80031d4:	40021000 	.word	0x40021000
 80031d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031dc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ea:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	fa93 f2a3 	rbit	r2, r3
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003206:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	4bc3      	ldr	r3, [pc, #780]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800322c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003230:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003234:	6011      	str	r1, [r2, #0]
 8003236:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800323a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800323e:	6812      	ldr	r2, [r2, #0]
 8003240:	fa92 f1a2 	rbit	r1, r2
 8003244:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003248:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800324c:	6011      	str	r1, [r2, #0]
  return result;
 800324e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003252:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	fab2 f282 	clz	r2, r2
 800325c:	b2d2      	uxtb	r2, r2
 800325e:	f042 0220 	orr.w	r2, r2, #32
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	f002 021f 	and.w	r2, r2, #31
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d185      	bne.n	8003180 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003274:	4baf      	ldr	r3, [pc, #700]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800327c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003280:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	430b      	orrs	r3, r1
 8003296:	49a7      	ldr	r1, [pc, #668]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ae:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032c0:	601a      	str	r2, [r3, #0]
  return result;
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80032ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80032d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	2301      	movs	r3, #1
 80032e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7fd fb29 	bl	8000938 <HAL_GetTick>
 80032e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ec:	f7fd fb24 	bl	8000938 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e13a      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8003300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003304:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003308:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003312:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003320:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003324:	601a      	str	r2, [r3, #0]
  return result;
 8003326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800332e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b3f      	cmp	r3, #63	@ 0x3f
 8003338:	d802      	bhi.n	8003340 <HAL_RCC_OscConfig+0xdd8>
 800333a:	4b7e      	ldr	r3, [pc, #504]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	e027      	b.n	8003390 <HAL_RCC_OscConfig+0xe28>
 8003340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003344:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003348:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800334c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800336e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003378:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	fa93 f2a3 	rbit	r2, r3
 8003382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003386:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	4b69      	ldr	r3, [pc, #420]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003394:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003398:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800339c:	6011      	str	r1, [r2, #0]
 800339e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	fa92 f1a2 	rbit	r1, r2
 80033ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033b4:	6011      	str	r1, [r2, #0]
  return result;
 80033b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	fab2 f282 	clz	r2, r2
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	f042 0220 	orr.w	r2, r2, #32
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	f002 021f 	and.w	r2, r2, #31
 80033d0:	2101      	movs	r1, #1
 80033d2:	fa01 f202 	lsl.w	r2, r1, r2
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d087      	beq.n	80032ec <HAL_RCC_OscConfig+0xd84>
 80033dc:	e0ca      	b.n	8003574 <HAL_RCC_OscConfig+0x100c>
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003402:	601a      	str	r2, [r3, #0]
  return result;
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800340c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003418:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	461a      	mov	r2, r3
 8003420:	2300      	movs	r3, #0
 8003422:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fa88 	bl	8000938 <HAL_GetTick>
 8003428:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e009      	b.n	8003442 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342e:	f7fd fa83 	bl	8000938 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e099      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800344a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003454:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003462:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003466:	601a      	str	r2, [r3, #0]
  return result;
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003470:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b3f      	cmp	r3, #63	@ 0x3f
 800347a:	d802      	bhi.n	8003482 <HAL_RCC_OscConfig+0xf1a>
 800347c:	4b2d      	ldr	r3, [pc, #180]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	e027      	b.n	80034d2 <HAL_RCC_OscConfig+0xf6a>
 8003482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003486:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800348a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800348e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003494:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fa93 f2a3 	rbit	r2, r3
 800349e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a2:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ac:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	fa93 f2a3 	rbit	r2, r3
 80034c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <HAL_RCC_OscConfig+0xfcc>)
 80034d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034d6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034da:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80034de:	6011      	str	r1, [r2, #0]
 80034e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	fa92 f1a2 	rbit	r1, r2
 80034ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034f6:	6011      	str	r1, [r2, #0]
  return result;
 80034f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034fc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	fab2 f282 	clz	r2, r2
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f042 0220 	orr.w	r2, r2, #32
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	f002 021f 	and.w	r2, r2, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f202 	lsl.w	r2, r1, r2
 8003518:	4013      	ands	r3, r2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d187      	bne.n	800342e <HAL_RCC_OscConfig+0xec6>
 800351e:	e029      	b.n	8003574 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d103      	bne.n	8003538 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e020      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
 8003534:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003538:	4b11      	ldr	r3, [pc, #68]	@ (8003580 <HAL_RCC_OscConfig+0x1018>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003540:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003544:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	429a      	cmp	r2, r3
 8003556:	d10b      	bne.n	8003570 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003558:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800355c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b09e      	sub	sp, #120	@ 0x78
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e154      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b89      	ldr	r3, [pc, #548]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b86      	ldr	r3, [pc, #536]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	4984      	ldr	r1, [pc, #528]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b82      	ldr	r3, [pc, #520]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e13c      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b7b      	ldr	r3, [pc, #492]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4978      	ldr	r1, [pc, #480]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80cd 	beq.w	8003792 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d137      	bne.n	8003670 <HAL_RCC_ClockConfig+0xec>
 8003600:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003604:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003608:	fa93 f3a3 	rbit	r3, r3
 800360c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800360e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b3f      	cmp	r3, #63	@ 0x3f
 8003618:	d802      	bhi.n	8003620 <HAL_RCC_ClockConfig+0x9c>
 800361a:	4b6b      	ldr	r3, [pc, #428]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e00f      	b.n	8003640 <HAL_RCC_ClockConfig+0xbc>
 8003620:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003624:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	667b      	str	r3, [r7, #100]	@ 0x64
 800362e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003632:	663b      	str	r3, [r7, #96]	@ 0x60
 8003634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003636:	fa93 f3a3 	rbit	r3, r3
 800363a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800363c:	4b62      	ldr	r3, [pc, #392]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003644:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003646:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003648:	fa92 f2a2 	rbit	r2, r2
 800364c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800364e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003650:	fab2 f282 	clz	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f002 021f 	and.w	r2, r2, #31
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d171      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0ea      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d137      	bne.n	80036e8 <HAL_RCC_ClockConfig+0x164>
 8003678:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800367c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003680:	fa93 f3a3 	rbit	r3, r3
 8003684:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003688:	fab3 f383 	clz	r3, r3
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003690:	d802      	bhi.n	8003698 <HAL_RCC_ClockConfig+0x114>
 8003692:	4b4d      	ldr	r3, [pc, #308]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	e00f      	b.n	80036b8 <HAL_RCC_ClockConfig+0x134>
 8003698:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800369c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036b4:	4b44      	ldr	r3, [pc, #272]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036bc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80036be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80036c0:	fa92 f2a2 	rbit	r2, r2
 80036c4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80036c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036c8:	fab2 f282 	clz	r2, r2
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f002 021f 	and.w	r2, r2, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f202 	lsl.w	r2, r1, r2
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d135      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0ae      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
 80036e8:	2302      	movs	r3, #2
 80036ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80036fe:	d802      	bhi.n	8003706 <HAL_RCC_ClockConfig+0x182>
 8003700:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	e00d      	b.n	8003722 <HAL_RCC_ClockConfig+0x19e>
 8003706:	2302      	movs	r3, #2
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	fa93 f3a3 	rbit	r3, r3
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	2302      	movs	r3, #2
 8003714:	623b      	str	r3, [r7, #32]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	4b2a      	ldr	r3, [pc, #168]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 8003720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003722:	2202      	movs	r2, #2
 8003724:	61ba      	str	r2, [r7, #24]
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	fa92 f2a2 	rbit	r2, r2
 800372c:	617a      	str	r2, [r7, #20]
  return result;
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	fab2 f282 	clz	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f042 0220 	orr.w	r2, r2, #32
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f002 021f 	and.w	r2, r2, #31
 8003740:	2101      	movs	r1, #1
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e07a      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003750:	4b1d      	ldr	r3, [pc, #116]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 0203 	bic.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	491a      	ldr	r1, [pc, #104]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 800375e:	4313      	orrs	r3, r2
 8003760:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003762:	f7fd f8e9 	bl	8000938 <HAL_GetTick>
 8003766:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003768:	e00a      	b.n	8003780 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800376a:	f7fd f8e5 	bl	8000938 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e062      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_RCC_ClockConfig+0x244>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 020c 	and.w	r2, r3, #12
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	429a      	cmp	r2, r3
 8003790:	d1eb      	bne.n	800376a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003792:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d215      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 0207 	bic.w	r2, r3, #7
 80037a8:	4906      	ldr	r1, [pc, #24]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b0:	4b04      	ldr	r3, [pc, #16]	@ (80037c4 <HAL_RCC_ClockConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d006      	beq.n	80037cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e041      	b.n	8003846 <HAL_RCC_ClockConfig+0x2c2>
 80037c2:	bf00      	nop
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <HAL_RCC_ClockConfig+0x2cc>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	491a      	ldr	r1, [pc, #104]	@ (8003850 <HAL_RCC_ClockConfig+0x2cc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <HAL_RCC_ClockConfig+0x2cc>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4912      	ldr	r1, [pc, #72]	@ (8003850 <HAL_RCC_ClockConfig+0x2cc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800380a:	f000 f829 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800380e:	4601      	mov	r1, r0
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_RCC_ClockConfig+0x2cc>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003818:	22f0      	movs	r2, #240	@ 0xf0
 800381a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	fa92 f2a2 	rbit	r2, r2
 8003822:	60fa      	str	r2, [r7, #12]
  return result;
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	fab2 f282 	clz	r2, r2
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	40d3      	lsrs	r3, r2
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x2d0>)
 8003830:	5cd3      	ldrb	r3, [r2, r3]
 8003832:	fa21 f303 	lsr.w	r3, r1, r3
 8003836:	4a08      	ldr	r2, [pc, #32]	@ (8003858 <HAL_RCC_ClockConfig+0x2d4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <HAL_RCC_ClockConfig+0x2d8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd f836 	bl	80008b0 <HAL_InitTick>
  
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3778      	adds	r7, #120	@ 0x78
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000
 8003854:	08003bc0 	.word	0x08003bc0
 8003858:	20000018 	.word	0x20000018
 800385c:	2000001c 	.word	0x2000001c

08003860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 030c 	and.w	r3, r3, #12
 8003886:	2b04      	cmp	r3, #4
 8003888:	d002      	beq.n	8003890 <HAL_RCC_GetSysClockFreq+0x30>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d003      	beq.n	8003896 <HAL_RCC_GetSysClockFreq+0x36>
 800388e:	e026      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003890:	4b19      	ldr	r3, [pc, #100]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003892:	613b      	str	r3, [r7, #16]
      break;
 8003894:	e026      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	0c9b      	lsrs	r3, r3, #18
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4a17      	ldr	r2, [pc, #92]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80038a0:	5cd3      	ldrb	r3, [r2, r3]
 80038a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80038a4:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	4a14      	ldr	r2, [pc, #80]	@ (8003900 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d008      	beq.n	80038ce <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038bc:	4a0e      	ldr	r2, [pc, #56]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e004      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003904 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038d2:	fb02 f303 	mul.w	r3, r2, r3
 80038d6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	613b      	str	r3, [r7, #16]
      break;
 80038dc:	e002      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80038e0:	613b      	str	r3, [r7, #16]
      break;
 80038e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e4:	693b      	ldr	r3, [r7, #16]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	007a1200 	.word	0x007a1200
 80038fc:	08003bd0 	.word	0x08003bd0
 8003900:	08003be0 	.word	0x08003be0
 8003904:	003d0900 	.word	0x003d0900

08003908 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b092      	sub	sp, #72	@ 0x48
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 80cb 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392c:	4b85      	ldr	r3, [pc, #532]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10e      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b82      	ldr	r3, [pc, #520]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4a81      	ldr	r2, [pc, #516]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003942:	61d3      	str	r3, [r2, #28]
 8003944:	4b7f      	ldr	r3, [pc, #508]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003956:	4b7c      	ldr	r3, [pc, #496]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d118      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003962:	4b79      	ldr	r3, [pc, #484]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a78      	ldr	r2, [pc, #480]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800396c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396e:	f7fc ffe3 	bl	8000938 <HAL_GetTick>
 8003972:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003974:	e008      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003976:	f7fc ffdf 	bl	8000938 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b64      	cmp	r3, #100	@ 0x64
 8003982:	d901      	bls.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0d9      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	4b6f      	ldr	r3, [pc, #444]	@ (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003994:	4b6b      	ldr	r3, [pc, #428]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d07b      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x194>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d074      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b2:	4b64      	ldr	r3, [pc, #400]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039c0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	fa93 f3a3 	rbit	r3, r3
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b5d      	ldr	r3, [pc, #372]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	461a      	mov	r2, r3
 80039dc:	2301      	movs	r3, #1
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	fa93 f3a3 	rbit	r3, r3
 80039ec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039f0:	fab3 f383 	clz	r3, r3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	4b54      	ldr	r3, [pc, #336]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	461a      	mov	r2, r3
 8003a00:	2300      	movs	r3, #0
 8003a02:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a04:	4a4f      	ldr	r2, [pc, #316]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a08:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d043      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fc ff90 	bl	8000938 <HAL_GetTick>
 8003a18:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fc ff8c 	bl	8000938 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e084      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a32:	2302      	movs	r3, #2
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3e:	2302      	movs	r3, #2
 8003a40:	623b      	str	r3, [r7, #32]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	fa93 f3a3 	rbit	r3, r3
 8003a48:	61fb      	str	r3, [r7, #28]
  return result;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003a5c:	4b39      	ldr	r3, [pc, #228]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	e007      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	4b35      	ldr	r3, [pc, #212]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	2202      	movs	r2, #2
 8003a74:	613a      	str	r2, [r7, #16]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	fa92 f2a2 	rbit	r2, r2
 8003a7c:	60fa      	str	r2, [r7, #12]
  return result;
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	fab2 f282 	clz	r2, r2
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	f002 021f 	and.w	r2, r2, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f202 	lsl.w	r2, r1, r2
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0bf      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a9c:	4b29      	ldr	r3, [pc, #164]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4926      	ldr	r1, [pc, #152]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003aae:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b23      	ldr	r3, [pc, #140]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4a22      	ldr	r2, [pc, #136]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ace:	4b1d      	ldr	r3, [pc, #116]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	491a      	ldr	r1, [pc, #104]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af0:	f023 0210 	bic.w	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4912      	ldr	r1, [pc, #72]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	490b      	ldr	r1, [pc, #44]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b28:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	4903      	ldr	r1, [pc, #12]	@ (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3748      	adds	r7, #72	@ 0x48
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
 8003b4c:	10908100 	.word	0x10908100

08003b50 <memset>:
 8003b50:	4402      	add	r2, r0
 8003b52:	4603      	mov	r3, r0
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	@ (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	@ (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f818 	bl	8003ba8 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003bf0 	.word	0x08003bf0
 8003b9c:	08003bf0 	.word	0x08003bf0
 8003ba0:	08003bf0 	.word	0x08003bf0
 8003ba4:	08003bf4 	.word	0x08003bf4

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
